<?php
// $Id: apachesolr.install,v 1.1.4.12 2009/01/28 19:28:32 pwolanin Exp $

/**
 * @file
 *   Install and related hooks for apachesolr_search.
 */

/**
 * Implementation of hook_install().
 */
function apachesolr_install() {
  // Create tables.
  drupal_install_schema('apachesolr');
}

/**
 * Implementation of hook_enable().
 */
function apachesolr_enable() {
  // Make sure we don't have stale data.
  variable_del('apachesolr_index_last');
  db_query("DELETE FROM {apachesolr_search_node}");
  // Populate table
  db_query("INSERT INTO {apachesolr_search_node} (nid, status, changed)
            SELECT n.nid, n.status, GREATEST(n.created, n.changed, c.last_comment_timestamp) AS changed
            FROM {node} n LEFT JOIN {apachesolr_search_node} asn ON n.nid = asn.nid
            LEFT JOIN {node_comment_statistics} c ON n.nid = c.nid
            WHERE asn.changed IS NULL");
}

/**
 * Implementation of hook_schema().
 *
 * TODO: move all node indexing/seach code to apachesolr_search
 */
function apachesolr_schema() {
  $schema['apachesolr_search_node'] = array(
    'description' => t('Stores a record of when a node property changed to determine if it needs indexing by Solr.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'status' => array(
        'description' => t('Boolean indicating whether the node is published (visible to non-administrators).'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1),
      'changed' => array(
        'description' => t('The Unix timestamp when a node property was changed.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
      ),
    'indexes' => array(
      'changed' => array('changed', 'status'),
      ),
    'primary key' => array('nid'),
    );

  return $schema;
}

/**
 * Implementation of hook_uninstall()
 */
function apachesolr_uninstall() {
  variable_del('apachesolr_host');
  variable_del('apachesolr_port');
  variable_del('apachesolr_path');
  variable_del('apachesolr_rows');
  variable_del('apachesolr_facet_query_limits');
  variable_del('apachesolr_facet_query_limit_default');  
  variable_del('apachesolr_site_hash');
  variable_del('apachesolr_index_last');
  // Remove tables.
  drupal_uninstall_schema('apachesolr');
}

/**
 * Create node indexing table.
 */
function apachesolr_update_6000() {
  // Create table.
  $ret = array();
  $schema['apachesolr_search_node'] = array(
    'description' => t('Stores a record of when a node property changed to determine if it needs indexing by Solr.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'status' => array(
        'description' => t('Boolean indicating whether the node is published (visible to non-administrators).'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1),
      'changed' => array(
        'description' => t('The Unix timestamp when a node property was changed.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
      ),
    'indexes' => array(
      'changed' => array('changed', 'status'),
      ),
    'primary key' => array('nid'),
    );
  db_create_table($ret, 'apachesolr_search_node', $schema['apachesolr_search_node']);
  // Populate table
  $ret[] = update_sql("INSERT INTO {apachesolr_search_node} (nid, status, changed)
                       SELECT n.nid, n.status, GREATEST(n.created, n.changed, c.last_comment_timestamp) AS changed
                       FROM {node} n LEFT JOIN {apachesolr_search_node} asn ON n.nid = asn.nid
                       LEFT JOIN {node_comment_statistics} c ON n.nid = c.nid
                       WHERE asn.changed IS NULL");

  return $ret;
}

/**
 * Fix block caching settings.
 *
 * Work-around for core bug: http://drupal.org/node/235673
 */
function apachesolr_update_6001() {
  $ret = array();

  $ret[] = update_sql("UPDATE {blocks} set cache = " . BLOCK_CACHE_PER_PAGE . " WHERE module LIKE 'apachesolr%'");

  return $ret;
  
}

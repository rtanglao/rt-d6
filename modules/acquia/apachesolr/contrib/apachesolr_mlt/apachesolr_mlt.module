<?php
// $Id: apachesolr_mlt.module,v 1.1.4.25 2009/02/20 16:39:44 pwolanin Exp $

/**
 * Implementation of hook_menu()
 */
function apachesolr_mlt_menu() {
  $items = array();

  $items['admin/settings/apachesolr_mlt'] = array(
    'title' => 'Apache Solr - More Like This',
    'description' => 'Configure content recommendation blocks using the Apache Solr "More Like This" handler.',
    'page callback' => 'apachesolr_mlt_settings',
    'access arguments' => array('administer search'),
  );
  $items['admin/settings/apachesolr_mlt/configure_block'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_mlt_block_form', 4),
    'access arguments' => array('administer search'),
    );
  $items['admin/settings/apachesolr_mlt/delete_block'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_mlt_delete_block_form', 4),
    'access arguments' => array('administer search'),
  );
  return $items;
}

/**
 * Implementation of hook_block
 */
function apachesolr_mlt_block($op = 'list', $delta = 0, $edit = array()) {
  static $access;

  if ($op == 'list') {
    //return all of the moreLikeThis blocks that the user has created
    $blocks = apachesolr_mlt_list_blocks();
    return $blocks;
  }
  else if ($op == 'view' && !empty($delta) && (arg(0) == 'node')) {
    //return the content of the block, based on the delta
    $nid = arg(1);
    if (is_numeric($nid) && (!arg(2) || arg(2) == 'view')) {
      // Determine whether the user can view the current node.
      if (!isset($access)) {
        $node = node_load($nid);
        $access = $node && node_access('view', $node);
      }
      if ($access) {
        return apachesolr_mlt_suggestions($delta, $nid);
      }
    }
  }
}

/**
 * function apachesolr_mlt_suggestions()
 * This function loads a the parameters for each moreLikeThis query, performs
 * the query, and returns a list of linked node titles.
 *
 * @param int $block_id A block ID for loading the suggestions
 *
 * @return array An array to be returned to hook_block
 */
function apachesolr_mlt_suggestions($block_id, $nid) {

  try {
    $solr = apachesolr_get_solr();
    $fields = array('mlt.mintf', 'mlt.mindf', 'mlt.minwl', 'mlt.maxwl', 'mlt.maxqt', 'mlt.boost', 'mlt.qf');
    $block = apachesolr_mlt_load_block($block_id);

    $params = array(
        'qt' => 'mlt',
        'fl' => 'nid,title,url',
        'mlt.fl' => implode(',', $block['mlt_fl']),
    );

    foreach ($fields as $field) {
      $drupal_fieldname = str_replace('.', '_', $field);
      if (!empty($block[$drupal_fieldname])) {
        $params[$field] = check_plain($block[$drupal_fieldname]);
      }
    }
    $query = apachesolr_drupal_query('id:' . apachesolr_document_id($nid));
    if (empty($query)) {
      // An error contacting the server.
      return;
    }
    // This hook allows modules to modify the query and params objects.
    apachesolr_modify_query($query, $params, 'apachesolr_mlt');
    if (empty($query)) {
      return;
    }

    $response = $solr->search($query->get_query_basic(), 0, $block['num_results'], $params);
    $suggestions = array();
    if ($response->response) {
      $r = (array) end($response->response);
      $links = array();

      if (is_array($r)) {
        foreach ($r as $result) {
          // Suitable for single-site mode.
          $links[] = l($result->title, 'node/' . $result->nid);
        }
      }

      if (count($links)) {
        $suggestions['subject'] = check_plain($block['name']);
        $suggestions['content'] = theme('apachesolr_mlt_recommendation_block', $links);
        if (user_access('administer search')) {
           $suggestions['content'] .= l(t('Configure this block'),'admin/settings/apachesolr_mlt/configure_block/' . $delta, array('attributes' => array('class' => 'apachesolr-mlt-admin-link')));
        }
      }
    }
    return $suggestions;
  } catch ( Exception $e ) {
      watchdog('Apache Solr', $e->getMessage(), NULL, WATCHDOG_ERROR );
  }
}

function apachesolr_mlt_theme($existing, $type, $theme, $path) {
  return array(
    'apachesolr_mlt_recommendation_block' => array(
      'arguments' => array('links' => NULL),
    ),
  );
}

function theme_apachesolr_mlt_recommendation_block($links) {
  return theme('item_list', $links);
}

/**
 * function apachesolr_mlt_settings()
 * Returns the settings page.
 */
function apachesolr_mlt_settings() {
  $query = "SELECT * FROM {apachesolr_mlt}";
  $results = db_query($query);
  $rows = array();
  while ($block = db_fetch_object($results)) {
    $block->data = unserialize($block->data);
    $rows[] = array(
      $block->id,
      check_plain($block->data['name']),
      l(t('Edit'), 'admin/settings/apachesolr_mlt/configure_block/' . $block->id) .' | ' . l('Delete', 'admin/settings/apachesolr_mlt/delete_block/' . $block->id),
    );
  }
  $header = array(t('Id'), t('Name'), t('Options'));
  $output = l(t('Add block'), 'admin/settings/apachesolr_mlt/configure_block');
  $output .= theme('table', $header, $rows);
  return $output;
}

/**
 * function apachesolr_mlt_block_form()
 * Allows users to create and edit moreLikeThis Blocks.
 * @param int $block_id If editing, the id of the block to edit.
 *
 * @return array The form used for editing.
 * TODO:
 *   Add term boost settings.
 *   Enable the user to specify a query, rather then forcing suggestions based
 *     on the node id.
 *
 */
function apachesolr_mlt_block_form(&$form_state, $block_id = NULL) {
  $block = array();
  // If editing, load the current settings for the block.
  if ($block_id && is_numeric($block_id)) {
    $block = apachesolr_mlt_load_block($block_id);
    $form['block_id'] = array(
      '#type' => 'value',
      '#value' => $block_id,
    );
  }

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Block Name'),
    '#description' => t('The block name displayed to site users.'),
    '#required' => TRUE,
    '#default_value' => isset($block['name']) ? $block['name'] : '',
    '#weight' => '-2',
  );
  $form['num_results'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of results'),
    '#default_value' => isset($block['num_results']) ? $block['num_results'] : 5,
    '#weight' => -1,
    );

  $form['comparison'] = array(
    '#type' => 'fieldset',
    '#title' => t('Comparison fields'),
    '#weight' => 0,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    );
  $form['comparison']['mlt_fl'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Fields for comparison'),
    '#description' => t('Select fields to be used in calculating similarity. The default combination of "taxonomy_names" and "title" will provide relevant results for typical sites.'),
    '#options' => apachesolr_mlt_get_fields(),
    '#default_value' => isset($block['mlt_fl']) ? $block['mlt_fl'] : array('title', 'taxonomy_names'),
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Configuration'),
    '#weight' => '1',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['advanced']['mlt_mintf'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Term Frequency'),
    '#description' => t('A word must appear this many times in any given document before the document is considered relevant for comparison.'),
    '#default_value' => isset($block['mlt_mintf']) ? (int) $block['mlt_mintf'] : 1,
  );
  $form['advanced']['mlt_mindf'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Document Frequency'),
    '#description' => t('A word must occur in at least this many documents before it will be used for similarity comparison.'),
    '#default_value' => isset($block['mlt_mindf']) ? (int) $block['mlt_mindf'] : 1,
  );
  $form['advanced']['mlt_minwl'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Word Length'),
    '#description' => 'You can use this to eliminate short words such as "the" and "it" from similarity comparisons. Words must be at least this number of characters or they will be ignored.',
    '#default_value' => isset($block['mlt_minwl']) ? (int) $block['mlt_minwl'] : 3,
  );
  $form['advanced']['mlt_maxwl'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum World Length'),
    '#description' => t('You can use this to eliminate very long words from similarity comparisons. Words of more than this number of characters will be ignored.'),
    '#default_value' => isset($block['mlt_maxwl']) ? (int) $block['mlt_maxwl'] : 15,
  );
  $form['advanced']['mlt_maxqt'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of query terms'),
    '#description' => t('The maximum number of query terms that will be included in any query. Lower numbers will result in fewer recommendations but will get results faster. If a content recommendation is not returning any recommendations, you can either check more "Comparison fields" checkboxes or increase the maximum number of query terms here.'),
    '#default_value' => isset($block['mlt_maxqt']) ? (int) $block['mlt_maxqt'] : 30,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => '5',
  );

  $form['#redirect'] = 'admin/settings/apachesolr_mlt';

  return $form;
}

/**
 * function apachesolr_mlt_block_validate()
 *
 * Perform basic form field validation on the morelikethis fields.
 *
 * @param string $form_id the form ID
 * @param array $form_values an array of from values
 */
function apachesolr_mlt_block_form_validate($form, &$form_state) {
  if ($form_state['values']['form_id'] == 'apachesolr_mlt_block_form') {
    foreach ($form_state['values'] as $key => $value) {
      //make sure the user inputed a number, accept for the field list
      if (strpos($key, 'mlt_') === 0 && $key != 'mlt_fl') {
        if (!empty($value) && !is_numeric($value)) {
          form_set_error($key, t("This field must contain a whole number."));
        }
      }
    }
  }
}

/**
 * function apachesolr_mlt_block_submit()
 * @param string $form_id the form ID
 * @param array $form_values an array of from values
 */
function apachesolr_mlt_block_form_submit($form, &$form_state) {
  if ($form_state['values']['form_id'] == 'apachesolr_mlt_block_form') {
    $form_state['values']['mlt_fl'] = array_diff($form_state['values']['mlt_fl'], array(0));
    apachesolr_mlt_save_block($form_state['values'], isset($form_state['values']['block_id']) ? $form_state['values']['block_id'] : NULL);
  }
}


/**
 * function apachesolr_mlt_get_fields()
 * A list of field names used on the settings form.
 * @return array An array containing a the fields in the solr instance.
 */
function apachesolr_mlt_get_fields() {
  $solr = apachesolr_get_solr();
  $fields = $solr->getFields();
  $rows = array();
  foreach ($fields as $field_name => $field) {
    if ($field->schema{4} == 'V')
    $rows[$field_name] = $field_name;
  }

  return $rows;
}

/**
 * function apachesolr_mlt_load_block()
 * A loader function for the apachesolr more like this module. If the function
 * is passed a proper block id, the function will return the settings for the
 * moreLikeThis request. If the block id is invalid the function returns an
 * empty array.
 *
 * @param int $block_id the id of the block you wish to load
 *
 * @return array Either the array of settings to perform the moreLikeThis request
 * or an empty array if the block id is invalid.
 */
function apachesolr_mlt_load_block($block_id = 0) {
  if (is_numeric($block_id)) {
    $query_results = db_result(db_query('SELECT data FROM {apachesolr_mlt} WHERE id = %d', $block_id));
    if (strlen($query_results)) {
      return unserialize($query_results);
    }
  }
  else {
    return array();
  }
}

/**
 * function apachesolr_mlt_save_block()
 * A helper function save the block data to the database.  If passed a valid
 * block id, the function will update block settings in the database. If it is
 * not passed a block id, the function will create a new block.
 *
 * @param array $block_settings An array containing the settings required to form
 * a moreLikeThis request.
 *
 * @param int $block_id The id of the block you wish to update.
 */
function apachesolr_mlt_save_block($block_settings = array(), $block_id = 0) {
  if (is_numeric($block_id) && $block_id > 0) {
    db_query("UPDATE {apachesolr_mlt} SET data = '%s' WHERE id = %d", serialize($block_settings), $block_id);
  }
  else {
    db_query("INSERT INTO {apachesolr_mlt} (data) VALUES ('%s')", serialize($block_settings));
  }
}

/**
 * function apachesolr_mlt_list_blocks()
 * Returns a list of blocks. Used by hook_block
 */
function apachesolr_mlt_list_blocks() {
  $block_results = db_query("SELECT * FROM {apachesolr_mlt}");
  $blocks = array();
  while ($block = db_fetch_object($block_results)) {
    $block->data = unserialize($block->data);
    $blocks[$block->id] = array('info' => t('Apache Solr recommendations: !name', array('!name' => $block->data['name'])) , 'cache' => BLOCK_CACHE_PER_PAGE);
  }
  return $blocks;
}

function apachesolr_mlt_delete_block_form(&$form_values, $block_id = NULL) {
  if (is_numeric($block_id)) {
    $block = apachesolr_mlt_load_block($block_id);
    $form['block_id'] = array(
      '#type' => 'value',
      '#value' => $block_id
    );
    $form['#redirect'] = 'admin/settings/apachesolr_mlt';
    return confirm_form($form,
      t('Are you sure you want to delete the Apache Solr content recommendation block %name?', array('%name' => $block['name'])),
      'admin/settings/apachesolr_mlt',
      t('The block will be deleted. This action cannot be undone.'),
      t('Delete'), t('Cancel'));
  }
}

function apachesolr_mlt_delete_block_form_submit($form, &$form_state) {
  db_query('DELETE FROM {apachesolr_mlt} WHERE id = %d', $form_state['values']['block_id']['#value']);
}
